// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
// This is your Prisma schema file
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
// model User {
//   id       Int      @id @default(autoincrement())
//   email    String   @unique
//   password String
//   name     String?
// }
// model User {
//   id       Int    @id @default(autoincrement())
//   email    String @unique
//   name     String
//   password String
//   username String @unique
//   posts    Post[] // One-to-many relationship with posts
// }

// model Post {
//   id        Int    @id @default(autoincrement())
//   title     String
//   content   String
//   authorId  Int
//   author    User   @relation(fields: [authorId], references: [id]) // Foreign key relationship to User model
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   title     String
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    Int
//   user      User     @relation(fields: [userId], references: [id])  // Foreign key to User
// }

model User {
  id                 String    @id @default(uuid())
  firstName          String
  lastName           String
  email              String    @unique
  password           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  communities        Community[] 
  posts     Post[]      // Unchanged
  favorites    Favorite[]
  // comminity mean if the user is a user they cannot edit website but for the admin like me they can edit the whole website like CRUD
}
model Post {
  id        Int      @id @default(autoincrement()) // Auto-increment ID
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   // User ID as String to match User model
  user      User     @relation(fields: [userId], references: [id])  // Relationship with User
}


model Community {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String
  category    String
  members     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}
model Favorite {
  id          String      @id @default(uuid())
  title       String
  url         String
  tag         String
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
